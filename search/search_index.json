{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Routerfy","text":"routerfy <p>Routerfy is an easy, fast and modern framework for building AWS Serverless applications with python 3.7+ using FastAPI for development and a lighter lambda layer on AWS Lambda execution.</p> <p>Documentation: Docs</p> <p>Source Code: GitHub</p> <p>Key features are:</p> <ul> <li>Light: Routerfy's lambda layer it's extremely light since it does not need any additional library to redirect routes.</li> <li>Fast to test: Increase the speed to test new features by about 500%.</li> <li>Fast to build templates: Building AWS templates never been that easy. Routerfy create all AWS templates with necessary properties but still customizable.</li> <li>Familiar Syntax: Routerfy use same syntax of FastAPI for routes creation turning the experience of migration a lot easier.</li> <li>Body Validation: Routerfy have an own route body validation like pydantic but lighter using no dependencies.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <p>For development serving, Routerfy uses the amazing ones:</p> <ul> <li>FastAPI for route management.</li> <li>Uvicorn for ASGI server.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>For development: <pre><code>pip install routerfy[dev]\n</code></pre> For AWS Lambda layer: <pre><code>pip install routerfy\n</code></pre></p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To create your first Routerfy project you only need to use <code>create</code> command. Open CMD in the folder you want to create your project and insert: <pre><code>routerfy create MyAwesomeRouterfyProject\n</code></pre></p> <p>If everything go well the project folder created will look like this: </p> <pre><code>.\n\u251c\u2500 routes/\n\u2502  \u251c\u2500 hello_world/\n\u2502  \u2502  \u251c\u2500 app.py\n\u2502  \u2502  \u251c\u2500 route.py\n\u2514\u2500 routerfy.config.yaml\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Our first example file is the <code>route.py</code> inside the lambda folder <code>hello_world</code>. All lambda folders must have a <code>route.py</code>. this way routerfy can identify routers and make the magic happens.</p> <pre><code>from routerfy import APIRouter, Response\n\nrouter = APIRouter(prefix=\"/hello\")\n\n@router.get(\"/\")\ndef hello_world_get_request():\n    return \"Hello World!\"\n</code></pre> <p>As you can see, the syntax is very similar to FastAPI.</p>"},{"location":"#testing-application","title":"Testing application","text":"<p>To test application you only need to use the <code>dev</code> command on your project terminal: <pre><code>routerfy dev\n</code></pre></p> <p>The server will start and you will have your routerfy application served locally!</p>"},{"location":"API%20Reference/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the routerfy <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>routerfy</code>: <pre><code>from routerfy import APIRouter\n</code></pre></p>"},{"location":"API%20Reference/#class-routerfyapirouter","title":"<code>class</code> routerfy.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n)\n</code></pre> <p><code>APIRouter</code> class used to group path operations, for example to structure an app in multiple files.</p>"},{"location":"API%20Reference/#example","title":"Example","text":"<pre><code>from routerfy import APIRouter\n\nrouter = APIRouter(\"/users\")\n\n@router.get(\"/\")\ndef read_users():\n    return [{\"username\": \"XG4mer\"}, {\"username\": \"MrJunkes\"}]\n</code></pre> PARAMETER DESCRIPTION TYPE DEFAULT <code>prefix</code> An optional path prefix for the router used to define methods prefixed paths. <code>str</code> <code>''</code>"},{"location":"API%20Reference/#method-get","title":"<code>method</code> get()","text":"<pre><code>get(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"API%20Reference/#example_1","title":"Example","text":"<pre><code>from routerfy import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/items\")\ndef read_items():\n    return [{\"name\": \"Rope\"}, {\"name\": \"Tire\"}]\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/#method-post","title":"<code>method</code> post()","text":"<pre><code>post(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"API%20Reference/#example_2","title":"Example","text":"<pre><code>from routerfy import APIRouter, BaseModel\n\nrouter = APIRouter()\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n@router.post(\"/items\")\ndef post_item(item: Item):\n    return {\"message\": \"Item created successfully!\"}\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/#method-put","title":"<code>method</code> put()","text":"<pre><code>put(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"API%20Reference/#example_3","title":"Example","text":"<pre><code>from routerfy import APIRouter, BaseModel\n\nrouter = APIRouter()\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n@router.put(\"/items/{item_id}\")\ndef update_item(item: Item, item_id):\n    return {\"message\": \"Item updated!\"}\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/#method-patch","title":"<code>method</code> patch()","text":"<pre><code>patch(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"API%20Reference/#example_4","title":"Example","text":"<pre><code>from routerfy import APIRouter, BaseModel\n\nrouter = APIRouter()\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/#method-delete","title":"<code>method</code> delete()","text":"<pre><code>delete(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"API%20Reference/#example_5","title":"Example","text":"<pre><code>from routerfy import APIRouter\n\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id):\n    return {\"message\": \"Item deleted!\"}\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/#method-options","title":"<code>method</code> options()","text":"<pre><code>options(\n    path\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"API%20Reference/#example_6","title":"Example","text":"<pre><code>from routerfy import APIRouter\n\nrouter = APIRouter()\n\n@router.options(\"/items\")\ndef get_item_options():\n    return {\"additions\": [\"Chair\", \"Broom\"]}\n</code></pre> PARAMETER DESCRIPTION TYPE <code>path</code> The URL path to be used for this path operation. For example, in <code>https://example.com/items</code>, the path is <code>/items</code>. <code>str</code>"},{"location":"API%20Reference/response/","title":"<code>Response</code> class","text":"<p>You can use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from routerfy:</p> <pre><code>from routerfy import Response\n</code></pre>"},{"location":"API%20Reference/response/#class-routerfyresponse","title":"<code>class</code> routerfy.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n)\n</code></pre>"},{"location":"API%20Reference/response/#example","title":"Example","text":"<pre><code>from routerfy import APIRouter, Response\n\nrouter = APIRouter(\"/users\")\n\n@router.get(\"/{user_id}\")\ndef read_users(user_id):\n    if user_id is None:\n        return Response(\"not authorized\", status_code=403)\n    ...\n    return {\"message\": \"user found\"}\n</code></pre> PARAMETER TYPE DEFAULT <code>content</code> <code>Any</code> <code>None</code> <code>status_code</code> <code>int</code> <code>200</code> <code>headers</code> <code>Optional[Mapping[str, str]]</code> <code>None</code> <code>media_type</code> <code>Optional[str]</code> <code>None</code>"}]}